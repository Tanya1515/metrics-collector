// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cmd/grpc/proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServeMetrics_SendMetrics_FullMethodName   = "/github.com.Tanya1515.metrics_collector.git.cmd.grpc.proto.ServeMetrics/SendMetrics"
	ServeMetrics_GetAllMetrics_FullMethodName = "/github.com.Tanya1515.metrics_collector.git.cmd.grpc.proto.ServeMetrics/GetAllMetrics"
	ServeMetrics_GetMetric_FullMethodName     = "/github.com.Tanya1515.metrics_collector.git.cmd.grpc.proto.ServeMetrics/GetMetric"
	ServeMetrics_PostMetric_FullMethodName    = "/github.com.Tanya1515.metrics_collector.git.cmd.grpc.proto.ServeMetrics/PostMetric"
)

// ServeMetricsClient is the client API for ServeMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServeMetricsClient interface {
	SendMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Metrics, MetricsResponse], error)
	GetAllMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Metrics, error)
	GetMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Metric, error)
	PostMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type serveMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewServeMetricsClient(cc grpc.ClientConnInterface) ServeMetricsClient {
	return &serveMetricsClient{cc}
}

func (c *serveMetricsClient) SendMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Metrics, MetricsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServeMetrics_ServiceDesc.Streams[0], ServeMetrics_SendMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Metrics, MetricsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServeMetrics_SendMetricsClient = grpc.ClientStreamingClient[Metrics, MetricsResponse]

func (c *serveMetricsClient) GetAllMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Metrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metrics)
	err := c.cc.Invoke(ctx, ServeMetrics_GetAllMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveMetricsClient) GetMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Metric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metric)
	err := c.cc.Invoke(ctx, ServeMetrics_GetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveMetricsClient) PostMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, ServeMetrics_PostMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServeMetricsServer is the server API for ServeMetrics service.
// All implementations must embed UnimplementedServeMetricsServer
// for forward compatibility.
type ServeMetricsServer interface {
	SendMetrics(grpc.ClientStreamingServer[Metrics, MetricsResponse]) error
	GetAllMetrics(context.Context, *emptypb.Empty) (*Metrics, error)
	GetMetric(context.Context, *Metric) (*Metric, error)
	PostMetric(context.Context, *Metric) (*MetricsResponse, error)
	mustEmbedUnimplementedServeMetricsServer()
}

// UnimplementedServeMetricsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServeMetricsServer struct{}

func (UnimplementedServeMetricsServer) SendMetrics(grpc.ClientStreamingServer[Metrics, MetricsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedServeMetricsServer) GetAllMetrics(context.Context, *emptypb.Empty) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetrics not implemented")
}
func (UnimplementedServeMetricsServer) GetMetric(context.Context, *Metric) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedServeMetricsServer) PostMetric(context.Context, *Metric) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMetric not implemented")
}
func (UnimplementedServeMetricsServer) mustEmbedUnimplementedServeMetricsServer() {}
func (UnimplementedServeMetricsServer) testEmbeddedByValue()                      {}

// UnsafeServeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServeMetricsServer will
// result in compilation errors.
type UnsafeServeMetricsServer interface {
	mustEmbedUnimplementedServeMetricsServer()
}

func RegisterServeMetricsServer(s grpc.ServiceRegistrar, srv ServeMetricsServer) {
	// If the following call pancis, it indicates UnimplementedServeMetricsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServeMetrics_ServiceDesc, srv)
}

func _ServeMetrics_SendMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServeMetricsServer).SendMetrics(&grpc.GenericServerStream[Metrics, MetricsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServeMetrics_SendMetricsServer = grpc.ClientStreamingServer[Metrics, MetricsResponse]

func _ServeMetrics_GetAllMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeMetricsServer).GetAllMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServeMetrics_GetAllMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeMetricsServer).GetAllMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServeMetrics_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeMetricsServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServeMetrics_GetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeMetricsServer).GetMetric(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServeMetrics_PostMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeMetricsServer).PostMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServeMetrics_PostMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeMetricsServer).PostMetric(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

// ServeMetrics_ServiceDesc is the grpc.ServiceDesc for ServeMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServeMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Tanya1515.metrics_collector.git.cmd.grpc.proto.ServeMetrics",
	HandlerType: (*ServeMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllMetrics",
			Handler:    _ServeMetrics_GetAllMetrics_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _ServeMetrics_GetMetric_Handler,
		},
		{
			MethodName: "PostMetric",
			Handler:    _ServeMetrics_PostMetric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMetrics",
			Handler:       _ServeMetrics_SendMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/grpc/proto/metrics.proto",
}
